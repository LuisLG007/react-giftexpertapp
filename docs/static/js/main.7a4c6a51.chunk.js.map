{"version":3,"sources":["components/AddCategory.js","helpers/GetGifts.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","setLimit","useState","inputValue","setinputValue","inputLimit","setInputLimit","type","placeholder","value","onChange","e","target","onClick","preventDefault","trim","length","cats","getGifs","category","limit","a","url","encodeURI","fetch","resp","json","data","gits","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","State","setState","useEffect","then","useFetchGifts","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SAAe,EAEpBC,mBAAS,IAFW,mBAEjDC,EAFiD,KAErCC,EAFqC,OAGpBF,mBAAS,IAHW,mBAGjDG,EAHiD,KAGrCC,EAHqC,KAwBxD,OACI,6BACI,2BACAC,KAAO,OACPC,YAAc,SACdC,MAAUN,EACVO,SAvBkB,SAAEC,GACxBP,EAAeO,EAAEC,OAAOH,UAwBpB,2BACAF,KAAO,SACPC,YAAc,qBACdC,MAAUJ,EACVK,SAzBkB,SAAEC,GACxBL,EAAeK,EAAEC,OAAOH,UA0BpB,4BAAQI,QAvBK,SAAEF,GACnBA,EAAEG,iBACGX,EAAWY,OAAOC,OAAS,IAC5BhB,GAAe,SAAAiB,GAAI,OAAMd,GAAN,mBAAqBc,OACxCb,EAAc,IACdH,EAAUI,GACVC,EAAc,OAiBd,e,uBCzCCY,EAAO,uCAAG,WAAOC,EAAUC,GAAjB,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWJ,GAF/C,kBAEsEI,UAAWH,GAFjF,sDAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,wDCaLO,EAXK,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAE/B,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCuBFO,EAxBC,SAAC,GAA2B,IAAxBpB,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,MAAa,ECHd,SAAED,EAAWC,GAAW,IAAD,EAEtBlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAJmC,mBAEzCC,EAFyC,KAElCC,EAFkC,KAkBhD,OAXAC,qBAAW,WACPzB,EAASC,EAAUC,GACdwB,MAAM,SAAAd,GACHY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGtB,CAAErB,EAAUC,IAGRqB,EDb2BI,CAAe1B,EAAUC,GAA7Ca,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAEtB,OACG,oCACK,wBAAIJ,UAAU,qCAAsCjB,GACpD,wBAAIiB,UAAU,qCAAd,UAA2DhB,GACzDoB,GAAW,uBAAGJ,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEXH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAgB,IAAKhB,EAAIC,IACLD,UEuBTiB,EAtCM,WAAM,MAIa7C,mBAAS,CAAC,cAJvB,mBAIhB8C,EAJgB,KAIJhD,EAJI,OAKGE,mBAAS,GALZ,mBAKhBkB,EALgB,KAKTnB,EALS,KAWvB,OACI,oCACI,4CACA,kBAAC,EAAD,CACID,cAAgBA,EAChBC,SAAWA,IACf,6BAEA,4BAEQ+C,EAAWnB,KAAK,SAAAV,GAAQ,OACpB,kBAAC,EAAD,CACI2B,IAAM3B,EACNA,SAAWA,EACXC,MAAQA,U,MCtBpC6B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.7a4c6a51.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories, setLimit }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const [inputLimit, setInputLimit] = useState('');\r\n\r\n    \r\n\r\n    const handleInputChange = ( e ) => {\r\n        setinputValue( e.target.value );\r\n    }\r\n\r\n    const handleLimitChange = ( e ) => {\r\n        setInputLimit( e.target.value );        \r\n    }\r\n\r\n    const handleSubmit = ( e ) =>{\r\n        e.preventDefault();       \r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats ]);\r\n            setinputValue('');\r\n            setLimit( inputLimit );           \r\n            setInputLimit('');\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <input \r\n            type = \"text\"\r\n            placeholder = \"Buscar\"\r\n            value = { inputValue }\r\n            onChange = { handleInputChange }\r\n            />\r\n            <input \r\n            type = \"number\"\r\n            placeholder = \"Número de Gifts\"\r\n            value = { inputLimit }\r\n            onChange = { handleLimitChange }\r\n            />\r\n            <button onClick={ handleSubmit }>Buscar...</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n//se escribe propType y al asignar es PropTypes\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","export const getGifs = async( category, limit ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category  ) }&limit=${ encodeURI( limit  ) }&api_key=KmRKEUZr2yEQ2LAnbmvbGN3UbypS5rWm`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    const gits = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gits;\r\n}","import React from 'react'\r\n\r\nconst GifGridItem = ( { id, title, url } ) => {   \r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGridItem\r\n","//import React, { useState, useEffect } from 'react'\r\nimport React from 'react';\r\nimport { useFetchGifts } from '../hooks/useFetchGifts';\r\nimport GifGridItem from './GifGridItem'\r\n\r\n\r\nconst GifGrid = ( { category, limit } ) => {\r\n\r\n    const { data: images, loading } = useFetchGifts( category, limit );        \r\n\r\n    return (\r\n       <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>  \r\n            <h2 className=\"animate__animated animate__fadeIn\">Gifts: { limit }</h2>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className=\"card-grid\">        \r\n            {\r\n                images.map( img => (\r\n                    <GifGridItem \r\n                    key={img.id}\r\n                    {...img}  />\r\n            ))\r\n            }\r\n        \r\n            </div>\r\n       </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/GetGifts\"\r\n\r\nexport const useFetchGifts = ( category , limit) => {\r\n\r\n    const [State, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifs( category, limit )\r\n            .then( img => {               \r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                })        \r\n            })\r\n    }, [ category, limit ])\r\n\r\n  \r\n    return State;\r\n}\r\n","import React, { useState } from 'react'\r\n//import PropTypes from 'prop-types'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragón Ball'];\r\n\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n    const [limit, setLimit] = useState(2)\r\n    /*\r\n    const handleAdd = () => {\r\n        setCategories( cats => [... categories, 'HunterXHunter']);\r\n    }\r\n    */\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory \r\n                setCategories={ setCategories }\r\n                setLimit={ setLimit } />\r\n            <hr/>\r\n        \r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                            limit={ limit } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nGifExpertApp.propTypes = {\r\n\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}